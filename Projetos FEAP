MACHINE LEARNING - TREINAMENTO DE DATASET
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

# Carregar dados
df = pd.read_excel("Saude_De_Cachorros_Por_Ra√ßa.xlsx")

# Remover coluna ID e linhas sem alvo
df.drop(columns=["ID"], inplace=True)
df = df[df["Saud√°vel"].notna()]

# Preencher valores faltantes
for col in df.select_dtypes(include=["object"]).columns:
    df[col] = df[col].fillna(df[col].mode()[0])
for col in df.select_dtypes(include=["float64", "int64"]).columns:
    df[col] = df[col].fillna(df[col].mean())

# Codificar vari√°veis categ√≥ricas
label_encoders = {}
for col in df.select_dtypes(include=["object"]).columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Separar features e alvo
X = df.drop("Saud√°vel", axis=1)
y = df["Saud√°vel"]

# Separar treino/teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinar modelo
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Avalia√ß√£o
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

# Mostrar matriz de confus√£o
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", 
            xticklabels=label_encoders["Saud√°vel"].classes_,
            yticklabels=label_encoders["Saud√°vel"].classes_)
plt.xlabel("Previsto")
plt.ylabel("Real")
plt.title(f"Matriz de Confus√£o - Acur√°cia: {accuracy:.2f}")
plt.tight_layout()
plt.show()

# Salvar modelo e codificadores
joblib.dump(model, "modelo_cachorros.pkl")
joblib.dump(label_encoders, "encoders.pkl")
----------------------------------------------------------------------------------------------------- 
Predict do Modelo:
import joblib
import pandas as pd

# Carregar modelo e encoders
model = joblib.load("modelo_cachorros.pkl")
label_encoders = joblib.load("encoders.pkl")

# Op√ß√µes v√°lidas extra√≠das do dataset
opcoes = {
    "Breed": ['Australian Shepherd', 'Dachshund', 'Chihuahua', 'Siberian Husky', 'Boxer', 'Labrador Retriever',
              'Bulldog', 'Rottweiler', 'German Shepherd', 'Golden Retriever', 'Poodle', 'Doberman', 'Great Dane',
              'Beagle', 'Yorkshire Terrier'],
    "Tamanho da Ra√ßa": ['Pequeno', 'M√©dio', 'Grande'],
    "Sexo": ['Macho', 'Femea'],
    "Status da Castra√ß√£o": ['Orquiectomia', 'Ovariohisterectomia', 'Nenhum'],
    "N√≠vel de Atividade Di√°ria": ['Nenhuma', 'Baixo', 'Moderado', 'Ativo', 'Muito ativo'],
    "Dieta": ['Feita em casa', 'Comida Molhada', 'Dieta especial', 'Ra√ß√£o seca'],
    "Marca de Ra√ß√£o": ['Wellness', 'Special', 'Purina', 'Iams', 'Blue Buffalo', 'Royal Canin',
                       'Nutro', 'Pedigree', "Hill's Science"],
    "Outros animais na casa": ['Sim', 'N√£o'],
    "Medicamentos?": ['Sim', 'N√£o'],
    "Convuls√£o": ['Sim', 'N√£o'],
    "N√≠vel de Atividade do Dono": ['Nenhum', 'Baixo', 'Moderado', 'Ativo', 'Muito Ativo']
}

# Fun√ß√£o para exibir op√ß√µes e capturar input
def escolher(col):
    print(f"\nOp√ß√µes para '{col}':")
    for i, val in enumerate(opcoes[col]):
        print(f"{i + 1}. {val}")
    idx = int(input(f"Escolha o n√∫mero correspondente √† op√ß√£o desejada para '{col}': ")) - 1
    return opcoes[col][idx]

# Verificar se deseja rodar dados de teste autom√°ticos
usar_teste = input("Usar dados de teste autom√°ticos? (s/n): ").strip().lower() == "s"

if usar_teste:
    entrada = {
        "Breed": "Golden Retriever",
        "Tamanho da Ra√ßa": "Grande",
        "Sexo": "Macho",
        "Idade": 5.0,
        "Peso": 30.0,
        "Status da Castra√ß√£o": "Orquiectomia",
        "N√≠vel de Atividade Di√°ria": "Ativo",
        "Dieta": "Ra√ß√£o seca",
        "Marca de Ra√ß√£o": "Royal Canin",
        "Dist√¢ncia caminhada di√°ria (milhas)": 3.0,
        "Outros animais na casa": "Sim",
        "Medicamentos?": "N√£o",
        "Convuls√£o": "N√£o",
        "Horas de Sono": 10.0,
        "Horas de Brincadeira": 3.0,
        "N√≠vel de Atividade do Dono": "Ativo",
        "Visitas anuais ao veterin√°rio": 2.0,
        "Temperatura mediana (F)": 72.0
    }
else:
    entrada = {
        "Breed": escolher("Breed"),
        "Tamanho da Ra√ßa": escolher("Tamanho da Ra√ßa"),
        "Sexo": escolher("Sexo"),
        "Idade": float(input("Idade (em anos): ")),
        "Peso": float(input("Peso (kg): ")),
        "Status da Castra√ß√£o": escolher("Status da Castra√ß√£o"),
        "N√≠vel de Atividade Di√°ria": escolher("N√≠vel de Atividade Di√°ria"),
        "Dieta": escolher("Dieta"),
        "Marca de Ra√ß√£o": escolher("Marca de Ra√ß√£o"),
        "Dist√¢ncia caminhada di√°ria (milhas)": float(input("Dist√¢ncia caminhada di√°ria (milhas): ")),
        "Outros animais na casa": escolher("Outros animais na casa"),
        "Medicamentos?": escolher("Medicamentos?"),
        "Convuls√£o": escolher("Convuls√£o"),
        "Horas de Sono": float(input("Horas de sono por dia: ")),
        "Horas de Brincadeira": float(input("Horas de brincadeira por dia: ")),
        "N√≠vel de Atividade do Dono": escolher("N√≠vel de Atividade do Dono"),
        "Visitas anuais ao veterin√°rio": float(input("Visitas ao veterin√°rio por ano: ")),
        "Temperatura mediana (F)": float(input("Temperatura m√©dia onde vive (Fahrenheit): "))
    }

# Codificar entradas
for col in entrada:
    if col in label_encoders:
        entrada[col] = label_encoders[col].transform([entrada[col]])[0]

# Converter para DataFrame
df_input = pd.DataFrame([entrada])

# Fazer predi√ß√£o
pred = model.predict(df_input)[0]
resultado = label_encoders["Saud√°vel"].inverse_transform([pred])[0]
print(f"\nüìä Resultado: O cachorro est√° {'SAUD√ÅVEL' if resultado == 'Sim' else 'N√ÉO SAUD√ÅVEL'}")
--------------------------------------------------------------------------------------------------------------
Random Forest:
Pular para o conte√∫do principal
Google Sala de Aula
Sala de Aula
2025.1 - Machine Learning
In√≠cio
Agenda
Minhas inscri√ß√µes
Pendentes
T
Tecnologia e Inova√ß√£o / EC - FEAP
P
Planej. de Carreira - TI
Eng. Comp. | 5¬∫, 6¬∫ e 7¬∫
F
FRAMEWORKS PARA DESENVOLVIMENTO DE SISTEMAS
2
2025.1 - Machine Learning
C
Computa√ß√£o Gr√°fica
2
2024.1 - GPTI
S
Seguran√ßa da Informa√ß√£o
ENGCOMP FEAP
Turmas arquivadas
Configura√ß√µes
Atividade Random ForestAtividade Random Forest
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
from sklearn.tree import plot_tree

iris = load_iris()
X = iris.data
y = iris.target
feature_names = iris.feature_names
class_names = iris.target_names

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

rf_model = RandomForestClassifier(n_estimators=100,
                                 random_state=42,
                                 max_depth=3,
                                 oob_score=True)

rf_model.fit(X_train, y_train)

y_pred = rf_model.predict(X_test)

print("Acur√°cia:", accuracy_score(y_test, y_pred))
print("\nRelat√≥rio de Classifica√ß√£o:\n", classification_report(y_test, y_pred, target_names=class_names))
print("\nOut-of-Bag Score:", rf_model.oob_score_)

plt.figure(figsize=(20,10))
tree_to_plot = 0
plot_tree(rf_model.estimators_[tree_to_plot],
          feature_names=feature_names,
          class_names=class_names,
          filled=True,
          rounded=True,
          proportion=True,
          precision=2,
          fontsize=10)
plt.title(f"√Årvore de Decis√£o {tree_to_plot} do Random Forest", fontsize=16)
plt.show()

n_trees_to_plot = 3
fig, axes = plt.subplots(nrows=1, ncols=n_trees_to_plot, figsize=(20, 5))
for index in range(n_trees_to_plot):
    plot_tree(rf_model.estimators_[index],
              feature_names=feature_names,
              class_names=class_names,
              filled=True,
              ax=axes[index])
    axes[index].set_title(f'√Årvore: {index}', fontsize=12)
plt.tight_layout()
plt.show()

importances = rf_model.feature_importances_
indices = np.argsort(importances)[::-1]
plt.figure(figsize=(10,6))
plt.title("Import√¢ncia das Features", fontsize=16)
plt.bar(range(X.shape[1]), importances[indices], align='center')
plt.xticks(range(X.shape[1]), [feature_names[i] for i in indices], rotation=45)
plt.xlabel("Features", fontsize=14)
plt.ylabel("Import√¢ncia", fontsize=14)
plt.tight_layout()
plt.show()

novo_dado = [[5.3, 3.5, 1.4, 0.2]]
previsao_geral = rf_model.predict(novo_dado)
print("\nPrevis√£o do Random Forest (exemplo da imagem):", class_names[previsao_geral[0]])

novos_dados = [
    [5.1, 3.8, 1.5, 0.3],
    [6.7, 3.0, 5.2, 2.3],
    [5.9, 2.8, 4.5, 1.5],
    [4.9, 2.4, 3.3, 1.0]
]

print("\nPrevis√µes para novos exemplos:")
for i, dado in enumerate(novos_dados):
    pred = rf_model.predict([dado])
    print(f"Exemplo {i+1}: {dado} -> {class_names[pred[0]]}")

plt.figure(figsize=(20,10))
plot_tree(rf_model.estimators_[0],
          feature_names=feature_names,
          class_names=class_names,
          filled=True,
          rounded=True)
plt.title(f"√Årvore 0 classificando: {novo_dado[0]}\nPrevis√£o: {class_names[previsao_geral[0]]}", 
          fontsize=16, pad=20)
plt.show()
RandomForest.py
Exibindo RandomForest.py‚Ä¶
Atividade Random Forest
Nicole Guido
‚Ä¢
28 de abr.
Data de entrega: 1 de mai.
Criar um algoritmo random forest e plotar as √°rvores.
Coment√°rios da turma
Seus trabalhos
Entregue

RandomForest.py
Texto
Coment√°rios particulares
___________________________________________________________________________________________________________________
CRIA√á√ÉO DE APLICA√á√ïES E SISTEMAS - LOJA VIRTUAL
-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Tempo de gera√ß√£o: 30/11/2024 √†s 00:46
-- Vers√£o do servidor: 10.4.32-MariaDB
-- Vers√£o do PHP: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Banco de dados: `loja_virtual`
--

-- --------------------------------------------------------

--
-- Estrutura para tabela `compras`
--

CREATE TABLE `compras` (
  `id` int(11) NOT NULL,
  `produto_id` int(11) DEFAULT NULL,
  `data_compra` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Despejando dados para a tabela `compras`
--

INSERT INTO `compras` (`id`, `produto_id`, `data_compra`) VALUES
(1, 1, '2024-11-29 19:59:16'),
(2, 3, '2024-11-29 20:16:16');

-- --------------------------------------------------------

--
-- Estrutura para tabela `produtos`
--

CREATE TABLE `produtos` (
  `id` int(11) NOT NULL,
  `nome` varchar(100) NOT NULL,
  `preco` decimal(10,2) NOT NULL,
  `vendido` tinyint(1) DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Despejando dados para a tabela `produtos`
--

INSERT INTO `produtos` (`id`, `nome`, `preco`, `vendido`) VALUES
(1, 'Produto A', 10.50, 1),
(2, 'Produto B', 20.00, 1),
(3, 'Produto C', 30.75, 1);

-- --------------------------------------------------------

--
-- Estrutura para tabela `usuarios`
--

CREATE TABLE `usuarios` (
  `id` int(11) NOT NULL,
  `nome_usuario` varchar(50) NOT NULL,
  `senha` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Despejando dados para a tabela `usuarios`
--

INSERT INTO `usuarios` (`id`, `nome_usuario`, `senha`) VALUES
(1, 'admin', '1234'),
(2, 'a', 'a');

--
-- √çndices para tabelas despejadas
--

--
-- √çndices de tabela `compras`
--
ALTER TABLE `compras`
  ADD PRIMARY KEY (`id`),
  ADD KEY `produto_id` (`produto_id`);

--
-- √çndices de tabela `produtos`
--
ALTER TABLE `produtos`
  ADD PRIMARY KEY (`id`);

--
-- √çndices de tabela `usuarios`
--
ALTER TABLE `usuarios`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT para tabelas despejadas
--

--
-- AUTO_INCREMENT de tabela `compras`
--
ALTER TABLE `compras`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT de tabela `produtos`
--
ALTER TABLE `produtos`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT de tabela `usuarios`
--
ALTER TABLE `usuarios`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- Restri√ß√µes para tabelas despejadas
--

--
-- Restri√ß√µes para tabelas `compras`
--
ALTER TABLE `compras`
  ADD CONSTRAINT `compras_ibfk_1` FOREIGN KEY (`produto_id`) REFERENCES `produtos` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
__________________________________________________________________________________________________________
PROJETO PYTHON - JOGO ENTREGADOR
import random

# Utilizando comando Classes para organiza√ß√£o de dados e funcionalidades

# Criando o personagem
class Entregador:
    def __init__(self, nome):
        self.nome = nome
        self.moedas = 0
        self.tempo_final = 0
        self.velocidade = 30  # Velocidade inicial em km/h

# Declarar as rotas que ser√£o utilizadas
    def seguir_leis_transito(self):
        penalidade = random.randint(0, 5)
        self.tempo_final += penalidade
        print(f"{self.nome} seguiu as leis de tr√¢nsito. Penalidade: {penalidade} minutos.")

        # Encontrando um "modo turbo" para chegar ao destino mais r√°pido
        modo_turbo = random.choice([True, False])
        if modo_turbo:
            ganho_turbo = random.randint(10, 20)
            self.velocidade += ganho_turbo
            print(f"{self.nome} encontrou um modo turbo! Velocidade aumentada em {ganho_turbo} km/h.")

	# Definindo o atalho
    def escolher_atalho(self):
        opcoes_atalho = {
            "Atalho direto": random.randint(5, 15),
            "Atalho com sem√°foro": random.randint(10, 20),
            "Atalho com tr√¢nsito": random.randint(15, 25)
        }

        print("Op√ß√µes de atalho:")
        for opcao, penalidade in opcoes_atalho.items():
            print(f"{opcao}: Tempo economizado entre {penalidade} minutos")

        escolha = input("Escolha um atalho digitando o nome: ")
        penalidade = opcoes_atalho.get(escolha, 0)

        self.tempo_final -= penalidade
        print(f"{self.nome} escolheu {escolha}. Tempo economizado: {penalidade} minutos.")

	# Definindo obst√°culos
    def enfrentar_contratempos(self):
        contratempos = {
            "tr√¢nsito": random.randint(10, 20),
            "sem√°foro": random.randint(5, 15),
            "pedestres": random.randint(8, 18),
            "acidente": random.randint(20, 30),
            "obras": random.randint(15, 25),
            "condicoes_climaticas": random.randint(10, 30)  # Nova op√ß√£o: condi√ß√µes clim√°ticas
        }

        contratempo = random.choice(list(contratempos.keys()))
        penalidade = contratempos[contratempo]

        self.tempo_final += penalidade
        print(f"{self.nome} enfrentou {contratempo}. Penalidade: {penalidade} minutos.")

        # Verificando se h√° guarda de tr√¢nsito
        guarda_presente = random.choice([True, False])
        if guarda_presente:
            self.encontrar_guarda()

        # Adicionar escolha de condi√ß√µes clim√°ticas
        escolha_clima = input("Est√° chovendo ou fazendo sol? (chuva/sol): ").lower()
        if escolha_clima == 'chuva':
            penalidade_chuva = random.randint(10, 20)
            self.tempo_final += penalidade_chuva
            print(f"{self.nome} enfrentou chuva. Penalidade: {penalidade_chuva} minutos.")
        elif escolha_clima == 'sol':
            print(f"{self.nome} teve um trajeto tranquilo sob o sol.")

        # Adicionar uma escolha relacionada a obst√°culos espec√≠ficos
        escolha_obstaculo = input("Encontrou algum obst√°culo espec√≠fico? (s/n): ").lower()
        if escolha_obstaculo == 's':
            penalidade_obstaculo = random.randint(5, 15)
            self.tempo_final += penalidade_obstaculo
            print(f"{self.nome} enfrentou um obst√°culo espec√≠fico. Penalidade: {penalidade_obstaculo} minutos.")

    def encontrar_guarda(self):
        print(f"{self.nome} encontrou um guarda de tr√¢nsito!")

        # Para verificar se o motoboy est√° acima da velocidade ou ultrapassou o sinal vermelho
        if self.velocidade > 40 or random.choice([True, False]):
            multa = random.randint(5, 15)
            print(f"{self.nome} recebeu uma multa! Penalidade: {multa} pontos.")
            # A multa afetar√° diretamente os pontos (√© convertido em perdas de moedas)
            self.moedas -= multa
        else:
            print(f"{self.nome} passou pelo guarda sem problemas.")

	# Realizar a entrega
    def realizar_entrega(self):
        print(f"{self.nome} partiu para entregar a mercadoria.")
        self.seguir_leis_transito()

	# Escolha de atalho
        decisao_atalho = input("Deseja pegar um atalho? (s/n): ").lower()
        if decisao_atalho == 's':
            self.escolher_atalho()
        else:
            self.enfrentar_contratempos()

	# Mostrar o tempo em que o entregador chegou com a encomenda
        print(f"{self.nome} chegou ao destino.")
        print(f"Tempo total: {self.tempo_final} minutos")

	# Definindo ganho de moedas como recompensa por chegar √† tempo e perda de moedas como penalidade por ter chegado atrasado
        if self.tempo_final <= 20:
            recompensa = random.randint(5, 15)
            self.moedas += recompensa
            print(f"{self.nome} entregou no prazo! Recompensa: {recompensa} moedas.")
        else:
            penalidade = random.randint(1, 10)
            self.moedas -= penalidade
            print(f"{self.nome} atrasou na entrega. Penalidade: {penalidade} moedas.")

	# Mostrar o saldo total das moedas ganhas/perdidas
        print(f"Moedas totais: {self.moedas}")

# Exemplo de uso
nome_entregador = input("Digite o nome do entregador:")
entregador = Entregador(nome_entregador)
entregador.realizar_entrega()
_____________________________________________________________________________________________________________________________________
